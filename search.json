[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards not including jokers\nWhen we initial create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♣️; A♦️; A❤️; A♠️; 2♣️; 2♦️; 2❤️; 2♠️; 3♣️; 3♦️; 3❤️; 3♠️; 4♣️; 4♦️; 4❤️; 4♠️; 5♣️; 5♦️; 5❤️; 5♠️; 6♣️; 6♦️; 6❤️; 6♠️; 7♣️; 7♦️; 7❤️; 7♠️; 8♣️; 8♦️; 8❤️; 8♠️; 9♣️; 9♦️; 9❤️; 9♠️; 10♣️; 10♦️; 10❤️; 10♠️; J♣️; J♦️; J❤️; J♠️; Q♣️; Q♦️; Q❤️; Q♠️; K♣️; K♦️; K❤️; K♠️\n\n\nThat should be 52 cards:\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we defined for a Card:\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']\n\n\nWe can check to see if, say, the Ace of Clubs is in the deck:\n\nCard(1,0) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one.\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(13,3)) # K♠️\n\nThere are 51 cards left in the deck now:\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemoves card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard32 = Card(3, 2)\ndeck.remove(card32)\n\nassert card32 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the cards in the deck\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement if replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not to draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[9❤️, A❤️, A♣️, 10♦️, 7♦️, 2❤️, 4♦️, 10♠️, 5♦️, K♣️, 6♠️, 3❤️, 2♣️]"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card",
    "section": "",
    "text": "We will be using numbers to represent playing card suits and ranks. Here are the suits:\nHere are the ranks:\nFor instance the rank at index 1 (note there isn’t a playing card at position 0, since we want the ranks to match the indicies where possible):\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices:\nFor example here are some tests for equality…\n\ntest_eq(Card(rank=3, suit=1), Card(rank=3, suit=1))\ntest_ne(Card(rank=3, suit=2), Card(rank=3, suit=1))\ntest_ne(Card(rank=2, suit=3), Card(rank=3, suit=1))\n\n…and a test of <…\n\nassert Card(rank=3, suit=1)<Card(rank=3, suit=2)\nassert Card(rank=1, suit=1)<Card(rank=3, suit=1)\nassert not Card(rank=3, suit=1)<Card(rank=3, suit=1)\nassert not Card(rank=3, suit=1)<Card(rank=2, suit=1)\n\n…and finally of >:\n\nassert Card(rank=3, suit=2)>Card(rank=3, suit=1)\nassert Card(rank=3, suit=1)>Card(rank=1, suit=1)\nassert not Card(rank=3, suit=1)>Card(rank=3, suit=1)\nassert not Card(rank=2, suit=1)>Card(rank=3, suit=1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-cards",
    "section": "",
    "text": "A deck of cards demo of nbdev based on ideas from Think Python"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-cards",
    "section": "Install",
    "text": "Install\nInstall using:\npip install nbdev_cards\nor\nconda install -c fastai nbdev_cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-cards",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display, and compare playing cards:\n\nCard(1,0), Card(1,1), Card(1, 2), Card(1, 3)\n\n(A♣️, A♦️, A❤️, A♠️)\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']"
  }
]